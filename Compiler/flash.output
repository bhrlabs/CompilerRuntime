State 7 conflicts: 1 reduce/reduce
State 37 conflicts: 1 reduce/reduce
State 51 conflicts: 1 reduce/reduce
State 69 conflicts: 13 reduce/reduce
State 110 conflicts: 12 shift/reduce
State 111 conflicts: 12 shift/reduce
State 112 conflicts: 4 shift/reduce
State 113 conflicts: 4 shift/reduce
State 114 conflicts: 4 shift/reduce
State 115 conflicts: 4 shift/reduce
State 116 conflicts: 4 shift/reduce
State 117 conflicts: 4 shift/reduce
State 118 conflicts: 4 shift/reduce
State 119 conflicts: 4 shift/reduce
State 120 conflicts: 12 shift/reduce
State 121 conflicts: 12 shift/reduce
State 124 conflicts: 1 shift/reduce
State 131 conflicts: 1 shift/reduce
State 133 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 $@1: /* empty */

    2 program: LET declaration functions IN $@1 commands END

    3 declaration: /* empty */
    4            | declaration declarations

    5 declarations: SKIP
    6             | INTEGER id_seqi IDENTIFIER
    7             | INTEGER id_seqi IDENTIFIER ';'
    8             | BOOLE id_seqb IDENTIFIER
    9             | BOOLE id_seqb IDENTIFIER ';'
   10             | BOOLE id_seqs IDENTIFIER
   11             | STR id_seqs IDENTIFIER ';'
   12             | STACK IDENTIFIER
   13             | STACK IDENTIFIER ';'

   14 functions: /* empty */
   15          | functions fun

   16 $@2: /* empty */

   17 fun: FUN IDENTIFIER $@2 '(' parameter ')' declaration commands END_FUN

   18 parameter: /* empty */
   19          | parameter parameters

   20 parameters: SKIP
   21           | INTEGER IDENTIFIER
   22           | INTEGER IDENTIFIER ';'
   23           | BOOLE IDENTIFIER
   24           | BOOLE IDENTIFIER ';'
   25           | STR IDENTIFIER
   26           | STR IDENTIFIER ';'

   27 arguments: /* empty */
   28          | argument IDENTIFIER

   29 argument: /* empty */
   30         | argument IDENTIFIER ','

   31 id_seqi: /* empty */
   32        | id_seqi IDENTIFIER ','

   33 id_seqb: /* empty */
   34        | id_seqb IDENTIFIER ','

   35 id_seqs: /* empty */
   36        | id_seqs IDENTIFIER ','

   37 commands: /* empty */
   38         | commands command
   39         | commands command ';'

   40 command: SKIP
   41        | IDENTIFIER ONTO '<' exp_int '>'
   42        | IDENTIFIER ASSGNOP IDENTIFIER OUTFROM
   43        | RETURN exp_int

   44 $@3: /* empty */

   45 command: CALL IDENTIFIER $@3 '(' arguments ')'

   46 $@4: /* empty */

   47 command: IDENTIFIER ASSGNOP CALL IDENTIFIER $@4 '(' arguments ')'
   48        | READ IDENTIFIER
   49        | READ '#' IDENTIFIER
   50        | READ '@' IDENTIFIER
   51        | WRITE exp_int
   52        | WRITE '#' exp_bol
   53        | WRITE '@' exp_str
   54        | IDENTIFIER ASSGNOP exp_int
   55        | IDENTIFIER ASSGNOP exp_bol
   56        | IDENTIFIER ASSGNOP exp_str
   57        | IF exp_str

   58 $@5: /* empty */

   59 $@6: /* empty */

   60 $@7: /* empty */

   61 command: IF exp_int $@5 THEN commands $@6 ELSE $@7 commands FI

   62 $@8: /* empty */

   63 $@9: /* empty */

   64 command: WHILE $@8 exp_int $@9 DO commands END

   65 $@10: /* empty */

   66 $@11: /* empty */

   67 $@12: /* empty */

   68 command: IF exp_bol $@10 THEN commands $@11 ELSE $@12 commands FI

   69 $@13: /* empty */

   70 $@14: /* empty */

   71 command: WHILE $@13 exp_bol $@14 DO commands END

   72 exp_int: NUMBER
   73        | IDENTIFIER
   74        | exp_int '<' exp_int
   75        | exp_int '=' exp_int
   76        | exp_int '>' exp_int
   77        | exp_int GEQ exp_int
   78        | exp_int LEQ exp_int
   79        | exp_int '+' exp_int
   80        | exp_int '-' exp_int
   81        | exp_int '*' exp_int
   82        | exp_int '/' exp_int
   83        | exp_int '^' exp_int
   84        | exp_int '|' exp_int
   85        | exp_int '&' exp_int
   86        | '(' exp_int ')'

   87 exp_bol: BOOLEAN
   88        | IDENTIFIER

   89 exp_str: STRING
   90        | IDENTIFIER
   91        | exp_str '.' exp_str


Terminals, with rules where they appear

$end (0) 0
'#' (35) 49 52
'&' (38) 85
'(' (40) 17 45 47 86
')' (41) 17 45 47 86
'*' (42) 81
'+' (43) 79
',' (44) 30 32 34 36
'-' (45) 80
'.' (46) 91
'/' (47) 82
';' (59) 7 9 11 13 22 24 26 39
'<' (60) 41 74
'=' (61) 75
'>' (62) 41 76
'@' (64) 50 53
'^' (94) 83
'|' (124) 84
error (256)
STRING (258) 89
BOOLEAN (259) 87
NUMBER (260) 72
IDENTIFIER (261) 6 7 8 9 10 11 12 13 17 21 22 23 24 25 26 28 30 32
    34 36 41 42 45 47 48 49 50 54 55 56 73 88 90
IF (262) 57 61 68
WHILE (263) 64 71
SKIP (264) 5 20 40
THEN (265) 61 68
ELSE (266) 61 68
FI (267) 61 68
DO (268) 64 71
END (269) 2 64 71
INTEGER (270) 6 7 21 22
READ (271) 48 49 50
WRITE (272) 51 52 53
LET (273) 2
IN (274) 2
BOOLE (275) 8 9 10 23 24
STR (276) 11 25 26
STACK (277) 12 13
ASSGNOP (278) 42 47 54 55 56
LEQ (279) 78
GEQ (280) 77
ONTO (281) 41
OUTFROM (282) 42
FUN (283) 17
END_FUN (284) 17
RETURN (285) 43
CALL (286) 45 47


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 2, on right: 0
$@1 (51)
    on left: 1, on right: 2
declaration (52)
    on left: 3 4, on right: 2 4 17
declarations (53)
    on left: 5 6 7 8 9 10 11 12 13, on right: 4
functions (54)
    on left: 14 15, on right: 2 15
fun (55)
    on left: 17, on right: 15
$@2 (56)
    on left: 16, on right: 17
parameter (57)
    on left: 18 19, on right: 17 19
parameters (58)
    on left: 20 21 22 23 24 25 26, on right: 19
arguments (59)
    on left: 27 28, on right: 45 47
argument (60)
    on left: 29 30, on right: 28 30
id_seqi (61)
    on left: 31 32, on right: 6 7 32
id_seqb (62)
    on left: 33 34, on right: 8 9 34
id_seqs (63)
    on left: 35 36, on right: 10 11 36
commands (64)
    on left: 37 38 39, on right: 2 17 38 39 61 64 68 71
command (65)
    on left: 40 41 42 43 45 47 48 49 50 51 52 53 54 55 56 57 61 64
    68 71, on right: 38 39
$@3 (66)
    on left: 44, on right: 45
$@4 (67)
    on left: 46, on right: 47
$@5 (68)
    on left: 58, on right: 61
$@6 (69)
    on left: 59, on right: 61
$@7 (70)
    on left: 60, on right: 61
$@8 (71)
    on left: 62, on right: 64
$@9 (72)
    on left: 63, on right: 64
$@10 (73)
    on left: 65, on right: 68
$@11 (74)
    on left: 66, on right: 68
$@12 (75)
    on left: 67, on right: 68
$@13 (76)
    on left: 69, on right: 71
$@14 (77)
    on left: 70, on right: 71
exp_int (78)
    on left: 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86, on right:
    41 43 51 54 61 64 74 75 76 77 78 79 80 81 82 83 84 85 86
exp_bol (79)
    on left: 87 88, on right: 52 55 68 71
exp_str (80)
    on left: 89 90 91, on right: 53 56 57 91


state 0

    0 $accept: . program $end

    LET  shift, and go to state 1

    program  go to state 2


state 1

    2 program: LET . declaration functions IN $@1 commands END

    $default  reduce using rule 3 (declaration)

    declaration  go to state 3


state 2

    0 $accept: program . $end

    $end  shift, and go to state 4


state 3

    2 program: LET declaration . functions IN $@1 commands END
    4 declaration: declaration . declarations

    SKIP     shift, and go to state 5
    INTEGER  shift, and go to state 6
    BOOLE    shift, and go to state 7
    STR      shift, and go to state 8
    STACK    shift, and go to state 9

    $default  reduce using rule 14 (functions)

    declarations  go to state 10
    functions     go to state 11


state 4

    0 $accept: program $end .

    $default  accept


state 5

    5 declarations: SKIP .

    $default  reduce using rule 5 (declarations)


state 6

    6 declarations: INTEGER . id_seqi IDENTIFIER
    7             | INTEGER . id_seqi IDENTIFIER ';'

    $default  reduce using rule 31 (id_seqi)

    id_seqi  go to state 12


state 7

    8 declarations: BOOLE . id_seqb IDENTIFIER
    9             | BOOLE . id_seqb IDENTIFIER ';'
   10             | BOOLE . id_seqs IDENTIFIER

    IDENTIFIER  reduce using rule 33 (id_seqb)
    IDENTIFIER  [reduce using rule 35 (id_seqs)]
    $default    reduce using rule 33 (id_seqb)

    id_seqb  go to state 13
    id_seqs  go to state 14


state 8

   11 declarations: STR . id_seqs IDENTIFIER ';'

    $default  reduce using rule 35 (id_seqs)

    id_seqs  go to state 15


state 9

   12 declarations: STACK . IDENTIFIER
   13             | STACK . IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 16


state 10

    4 declaration: declaration declarations .

    $default  reduce using rule 4 (declaration)


state 11

    2 program: LET declaration functions . IN $@1 commands END
   15 functions: functions . fun

    IN   shift, and go to state 17
    FUN  shift, and go to state 18

    fun  go to state 19


state 12

    6 declarations: INTEGER id_seqi . IDENTIFIER
    7             | INTEGER id_seqi . IDENTIFIER ';'
   32 id_seqi: id_seqi . IDENTIFIER ','

    IDENTIFIER  shift, and go to state 20


state 13

    8 declarations: BOOLE id_seqb . IDENTIFIER
    9             | BOOLE id_seqb . IDENTIFIER ';'
   34 id_seqb: id_seqb . IDENTIFIER ','

    IDENTIFIER  shift, and go to state 21


state 14

   10 declarations: BOOLE id_seqs . IDENTIFIER
   36 id_seqs: id_seqs . IDENTIFIER ','

    IDENTIFIER  shift, and go to state 22


state 15

   11 declarations: STR id_seqs . IDENTIFIER ';'
   36 id_seqs: id_seqs . IDENTIFIER ','

    IDENTIFIER  shift, and go to state 23


state 16

   12 declarations: STACK IDENTIFIER .
   13             | STACK IDENTIFIER . ';'

    ';'  shift, and go to state 24

    $default  reduce using rule 12 (declarations)


state 17

    2 program: LET declaration functions IN . $@1 commands END

    $default  reduce using rule 1 ($@1)

    $@1  go to state 25


state 18

   17 fun: FUN . IDENTIFIER $@2 '(' parameter ')' declaration commands END_FUN

    IDENTIFIER  shift, and go to state 26


state 19

   15 functions: functions fun .

    $default  reduce using rule 15 (functions)


state 20

    6 declarations: INTEGER id_seqi IDENTIFIER .
    7             | INTEGER id_seqi IDENTIFIER . ';'
   32 id_seqi: id_seqi IDENTIFIER . ','

    ';'  shift, and go to state 27
    ','  shift, and go to state 28

    $default  reduce using rule 6 (declarations)


state 21

    8 declarations: BOOLE id_seqb IDENTIFIER .
    9             | BOOLE id_seqb IDENTIFIER . ';'
   34 id_seqb: id_seqb IDENTIFIER . ','

    ';'  shift, and go to state 29
    ','  shift, and go to state 30

    $default  reduce using rule 8 (declarations)


state 22

   10 declarations: BOOLE id_seqs IDENTIFIER .
   36 id_seqs: id_seqs IDENTIFIER . ','

    ','  shift, and go to state 31

    $default  reduce using rule 10 (declarations)


state 23

   11 declarations: STR id_seqs IDENTIFIER . ';'
   36 id_seqs: id_seqs IDENTIFIER . ','

    ';'  shift, and go to state 32
    ','  shift, and go to state 31


state 24

   13 declarations: STACK IDENTIFIER ';' .

    $default  reduce using rule 13 (declarations)


state 25

    2 program: LET declaration functions IN $@1 . commands END

    $default  reduce using rule 37 (commands)

    commands  go to state 33


state 26

   17 fun: FUN IDENTIFIER . $@2 '(' parameter ')' declaration commands END_FUN

    $default  reduce using rule 16 ($@2)

    $@2  go to state 34


state 27

    7 declarations: INTEGER id_seqi IDENTIFIER ';' .

    $default  reduce using rule 7 (declarations)


state 28

   32 id_seqi: id_seqi IDENTIFIER ',' .

    $default  reduce using rule 32 (id_seqi)


state 29

    9 declarations: BOOLE id_seqb IDENTIFIER ';' .

    $default  reduce using rule 9 (declarations)


state 30

   34 id_seqb: id_seqb IDENTIFIER ',' .

    $default  reduce using rule 34 (id_seqb)


state 31

   36 id_seqs: id_seqs IDENTIFIER ',' .

    $default  reduce using rule 36 (id_seqs)


state 32

   11 declarations: STR id_seqs IDENTIFIER ';' .

    $default  reduce using rule 11 (declarations)


state 33

    2 program: LET declaration functions IN $@1 commands . END
   38 commands: commands . command
   39         | commands . command ';'

    IDENTIFIER  shift, and go to state 35
    IF          shift, and go to state 36
    WHILE       shift, and go to state 37
    SKIP        shift, and go to state 38
    END         shift, and go to state 39
    READ        shift, and go to state 40
    WRITE       shift, and go to state 41
    RETURN      shift, and go to state 42
    CALL        shift, and go to state 43

    command  go to state 44


state 34

   17 fun: FUN IDENTIFIER $@2 . '(' parameter ')' declaration commands END_FUN

    '('  shift, and go to state 45


state 35

   41 command: IDENTIFIER . ONTO '<' exp_int '>'
   42        | IDENTIFIER . ASSGNOP IDENTIFIER OUTFROM
   47        | IDENTIFIER . ASSGNOP CALL IDENTIFIER $@4 '(' arguments ')'
   54        | IDENTIFIER . ASSGNOP exp_int
   55        | IDENTIFIER . ASSGNOP exp_bol
   56        | IDENTIFIER . ASSGNOP exp_str

    ASSGNOP  shift, and go to state 46
    ONTO     shift, and go to state 47


state 36

   57 command: IF . exp_str
   61        | IF . exp_int $@5 THEN commands $@6 ELSE $@7 commands FI
   68        | IF . exp_bol $@10 THEN commands $@11 ELSE $@12 commands FI

    STRING      shift, and go to state 48
    BOOLEAN     shift, and go to state 49
    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 51
    '('         shift, and go to state 52

    exp_int  go to state 53
    exp_bol  go to state 54
    exp_str  go to state 55


state 37

   64 command: WHILE . $@8 exp_int $@9 DO commands END
   71        | WHILE . $@13 exp_bol $@14 DO commands END

    BOOLEAN     reduce using rule 69 ($@13)
    IDENTIFIER  reduce using rule 62 ($@8)
    IDENTIFIER  [reduce using rule 69 ($@13)]
    $default    reduce using rule 62 ($@8)

    $@8   go to state 56
    $@13  go to state 57


state 38

   40 command: SKIP .

    $default  reduce using rule 40 (command)


state 39

    2 program: LET declaration functions IN $@1 commands END .

    $default  reduce using rule 2 (program)


state 40

   48 command: READ . IDENTIFIER
   49        | READ . '#' IDENTIFIER
   50        | READ . '@' IDENTIFIER

    IDENTIFIER  shift, and go to state 58
    '#'         shift, and go to state 59
    '@'         shift, and go to state 60


state 41

   51 command: WRITE . exp_int
   52        | WRITE . '#' exp_bol
   53        | WRITE . '@' exp_str

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52
    '#'         shift, and go to state 62
    '@'         shift, and go to state 63

    exp_int  go to state 64


state 42

   43 command: RETURN . exp_int

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52

    exp_int  go to state 65


state 43

   45 command: CALL . IDENTIFIER $@3 '(' arguments ')'

    IDENTIFIER  shift, and go to state 66


state 44

   38 commands: commands command .
   39         | commands command . ';'

    ';'  shift, and go to state 67

    $default  reduce using rule 38 (commands)


state 45

   17 fun: FUN IDENTIFIER $@2 '(' . parameter ')' declaration commands END_FUN

    $default  reduce using rule 18 (parameter)

    parameter  go to state 68


state 46

   42 command: IDENTIFIER ASSGNOP . IDENTIFIER OUTFROM
   47        | IDENTIFIER ASSGNOP . CALL IDENTIFIER $@4 '(' arguments ')'
   54        | IDENTIFIER ASSGNOP . exp_int
   55        | IDENTIFIER ASSGNOP . exp_bol
   56        | IDENTIFIER ASSGNOP . exp_str

    STRING      shift, and go to state 48
    BOOLEAN     shift, and go to state 49
    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 69
    CALL        shift, and go to state 70
    '('         shift, and go to state 52

    exp_int  go to state 71
    exp_bol  go to state 72
    exp_str  go to state 73


state 47

   41 command: IDENTIFIER ONTO . '<' exp_int '>'

    '<'  shift, and go to state 74


state 48

   89 exp_str: STRING .

    $default  reduce using rule 89 (exp_str)


state 49

   87 exp_bol: BOOLEAN .

    $default  reduce using rule 87 (exp_bol)


state 50

   72 exp_int: NUMBER .

    $default  reduce using rule 72 (exp_int)


state 51

   73 exp_int: IDENTIFIER .
   88 exp_bol: IDENTIFIER .
   90 exp_str: IDENTIFIER .

    THEN      reduce using rule 73 (exp_int)
    THEN      [reduce using rule 88 (exp_bol)]
    LEQ       reduce using rule 73 (exp_int)
    GEQ       reduce using rule 73 (exp_int)
    '-'       reduce using rule 73 (exp_int)
    '+'       reduce using rule 73 (exp_int)
    '*'       reduce using rule 73 (exp_int)
    '/'       reduce using rule 73 (exp_int)
    '^'       reduce using rule 73 (exp_int)
    '|'       reduce using rule 73 (exp_int)
    '&'       reduce using rule 73 (exp_int)
    '='       reduce using rule 73 (exp_int)
    '<'       reduce using rule 73 (exp_int)
    '>'       reduce using rule 73 (exp_int)
    $default  reduce using rule 90 (exp_str)


state 52

   86 exp_int: '(' . exp_int ')'

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52

    exp_int  go to state 75


state 53

   61 command: IF exp_int . $@5 THEN commands $@6 ELSE $@7 commands FI
   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '-'  shift, and go to state 78
    '+'  shift, and go to state 79
    '*'  shift, and go to state 80
    '/'  shift, and go to state 81
    '^'  shift, and go to state 82
    '|'  shift, and go to state 83
    '&'  shift, and go to state 84
    '='  shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    $default  reduce using rule 58 ($@5)

    $@5  go to state 88


state 54

   68 command: IF exp_bol . $@10 THEN commands $@11 ELSE $@12 commands FI

    $default  reduce using rule 65 ($@10)

    $@10  go to state 89


state 55

   57 command: IF exp_str .
   91 exp_str: exp_str . '.' exp_str

    '.'  shift, and go to state 90

    $default  reduce using rule 57 (command)


state 56

   64 command: WHILE $@8 . exp_int $@9 DO commands END

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52

    exp_int  go to state 91


state 57

   71 command: WHILE $@13 . exp_bol $@14 DO commands END

    BOOLEAN     shift, and go to state 49
    IDENTIFIER  shift, and go to state 92

    exp_bol  go to state 93


state 58

   48 command: READ IDENTIFIER .

    $default  reduce using rule 48 (command)


state 59

   49 command: READ '#' . IDENTIFIER

    IDENTIFIER  shift, and go to state 94


state 60

   50 command: READ '@' . IDENTIFIER

    IDENTIFIER  shift, and go to state 95


state 61

   73 exp_int: IDENTIFIER .

    $default  reduce using rule 73 (exp_int)


state 62

   52 command: WRITE '#' . exp_bol

    BOOLEAN     shift, and go to state 49
    IDENTIFIER  shift, and go to state 92

    exp_bol  go to state 96


state 63

   53 command: WRITE '@' . exp_str

    STRING      shift, and go to state 48
    IDENTIFIER  shift, and go to state 97

    exp_str  go to state 98


state 64

   51 command: WRITE exp_int .
   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '-'  shift, and go to state 78
    '+'  shift, and go to state 79
    '*'  shift, and go to state 80
    '/'  shift, and go to state 81
    '^'  shift, and go to state 82
    '|'  shift, and go to state 83
    '&'  shift, and go to state 84
    '='  shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    $default  reduce using rule 51 (command)


state 65

   43 command: RETURN exp_int .
   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '-'  shift, and go to state 78
    '+'  shift, and go to state 79
    '*'  shift, and go to state 80
    '/'  shift, and go to state 81
    '^'  shift, and go to state 82
    '|'  shift, and go to state 83
    '&'  shift, and go to state 84
    '='  shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    $default  reduce using rule 43 (command)


state 66

   45 command: CALL IDENTIFIER . $@3 '(' arguments ')'

    $default  reduce using rule 44 ($@3)

    $@3  go to state 99


state 67

   39 commands: commands command ';' .

    $default  reduce using rule 39 (commands)


state 68

   17 fun: FUN IDENTIFIER $@2 '(' parameter . ')' declaration commands END_FUN
   19 parameter: parameter . parameters

    SKIP     shift, and go to state 100
    INTEGER  shift, and go to state 101
    BOOLE    shift, and go to state 102
    STR      shift, and go to state 103
    ')'      shift, and go to state 104

    parameters  go to state 105


state 69

   42 command: IDENTIFIER ASSGNOP IDENTIFIER . OUTFROM
   73 exp_int: IDENTIFIER .
   88 exp_bol: IDENTIFIER .
   90 exp_str: IDENTIFIER .

    OUTFROM  shift, and go to state 106

    IDENTIFIER  reduce using rule 73 (exp_int)
    IDENTIFIER  [reduce using rule 88 (exp_bol)]
    IDENTIFIER  [reduce using rule 90 (exp_str)]
    IF          reduce using rule 73 (exp_int)
    IF          [reduce using rule 88 (exp_bol)]
    IF          [reduce using rule 90 (exp_str)]
    WHILE       reduce using rule 73 (exp_int)
    WHILE       [reduce using rule 88 (exp_bol)]
    WHILE       [reduce using rule 90 (exp_str)]
    SKIP        reduce using rule 73 (exp_int)
    SKIP        [reduce using rule 88 (exp_bol)]
    SKIP        [reduce using rule 90 (exp_str)]
    ELSE        reduce using rule 73 (exp_int)
    ELSE        [reduce using rule 88 (exp_bol)]
    ELSE        [reduce using rule 90 (exp_str)]
    FI          reduce using rule 73 (exp_int)
    FI          [reduce using rule 88 (exp_bol)]
    FI          [reduce using rule 90 (exp_str)]
    END         reduce using rule 73 (exp_int)
    END         [reduce using rule 88 (exp_bol)]
    END         [reduce using rule 90 (exp_str)]
    READ        reduce using rule 73 (exp_int)
    READ        [reduce using rule 88 (exp_bol)]
    READ        [reduce using rule 90 (exp_str)]
    WRITE       reduce using rule 73 (exp_int)
    WRITE       [reduce using rule 88 (exp_bol)]
    WRITE       [reduce using rule 90 (exp_str)]
    END_FUN     reduce using rule 73 (exp_int)
    END_FUN     [reduce using rule 88 (exp_bol)]
    END_FUN     [reduce using rule 90 (exp_str)]
    RETURN      reduce using rule 73 (exp_int)
    RETURN      [reduce using rule 88 (exp_bol)]
    RETURN      [reduce using rule 90 (exp_str)]
    CALL        reduce using rule 73 (exp_int)
    CALL        [reduce using rule 88 (exp_bol)]
    CALL        [reduce using rule 90 (exp_str)]
    ';'         reduce using rule 73 (exp_int)
    ';'         [reduce using rule 88 (exp_bol)]
    ';'         [reduce using rule 90 (exp_str)]
    '.'         reduce using rule 90 (exp_str)
    $default    reduce using rule 73 (exp_int)


state 70

   47 command: IDENTIFIER ASSGNOP CALL . IDENTIFIER $@4 '(' arguments ')'

    IDENTIFIER  shift, and go to state 107


state 71

   54 command: IDENTIFIER ASSGNOP exp_int .
   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '-'  shift, and go to state 78
    '+'  shift, and go to state 79
    '*'  shift, and go to state 80
    '/'  shift, and go to state 81
    '^'  shift, and go to state 82
    '|'  shift, and go to state 83
    '&'  shift, and go to state 84
    '='  shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    $default  reduce using rule 54 (command)


state 72

   55 command: IDENTIFIER ASSGNOP exp_bol .

    $default  reduce using rule 55 (command)


state 73

   56 command: IDENTIFIER ASSGNOP exp_str .
   91 exp_str: exp_str . '.' exp_str

    '.'  shift, and go to state 90

    $default  reduce using rule 56 (command)


state 74

   41 command: IDENTIFIER ONTO '<' . exp_int '>'

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52

    exp_int  go to state 108


state 75

   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int
   86        | '(' exp_int . ')'

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '-'  shift, and go to state 78
    '+'  shift, and go to state 79
    '*'  shift, and go to state 80
    '/'  shift, and go to state 81
    '^'  shift, and go to state 82
    '|'  shift, and go to state 83
    '&'  shift, and go to state 84
    '='  shift, and go to state 85
    ')'  shift, and go to state 109
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87


state 76

   78 exp_int: exp_int LEQ . exp_int

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52

    exp_int  go to state 110


state 77

   77 exp_int: exp_int GEQ . exp_int

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52

    exp_int  go to state 111


state 78

   80 exp_int: exp_int '-' . exp_int

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52

    exp_int  go to state 112


state 79

   79 exp_int: exp_int '+' . exp_int

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52

    exp_int  go to state 113


state 80

   81 exp_int: exp_int '*' . exp_int

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52

    exp_int  go to state 114


state 81

   82 exp_int: exp_int '/' . exp_int

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52

    exp_int  go to state 115


state 82

   83 exp_int: exp_int '^' . exp_int

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52

    exp_int  go to state 116


state 83

   84 exp_int: exp_int '|' . exp_int

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52

    exp_int  go to state 117


state 84

   85 exp_int: exp_int '&' . exp_int

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52

    exp_int  go to state 118


state 85

   75 exp_int: exp_int '=' . exp_int

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52

    exp_int  go to state 119


state 86

   74 exp_int: exp_int '<' . exp_int

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52

    exp_int  go to state 120


state 87

   76 exp_int: exp_int '>' . exp_int

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52

    exp_int  go to state 121


state 88

   61 command: IF exp_int $@5 . THEN commands $@6 ELSE $@7 commands FI

    THEN  shift, and go to state 122


state 89

   68 command: IF exp_bol $@10 . THEN commands $@11 ELSE $@12 commands FI

    THEN  shift, and go to state 123


state 90

   91 exp_str: exp_str '.' . exp_str

    STRING      shift, and go to state 48
    IDENTIFIER  shift, and go to state 97

    exp_str  go to state 124


state 91

   64 command: WHILE $@8 exp_int . $@9 DO commands END
   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '-'  shift, and go to state 78
    '+'  shift, and go to state 79
    '*'  shift, and go to state 80
    '/'  shift, and go to state 81
    '^'  shift, and go to state 82
    '|'  shift, and go to state 83
    '&'  shift, and go to state 84
    '='  shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    $default  reduce using rule 63 ($@9)

    $@9  go to state 125


state 92

   88 exp_bol: IDENTIFIER .

    $default  reduce using rule 88 (exp_bol)


state 93

   71 command: WHILE $@13 exp_bol . $@14 DO commands END

    $default  reduce using rule 70 ($@14)

    $@14  go to state 126


state 94

   49 command: READ '#' IDENTIFIER .

    $default  reduce using rule 49 (command)


state 95

   50 command: READ '@' IDENTIFIER .

    $default  reduce using rule 50 (command)


state 96

   52 command: WRITE '#' exp_bol .

    $default  reduce using rule 52 (command)


state 97

   90 exp_str: IDENTIFIER .

    $default  reduce using rule 90 (exp_str)


state 98

   53 command: WRITE '@' exp_str .
   91 exp_str: exp_str . '.' exp_str

    '.'  shift, and go to state 90

    $default  reduce using rule 53 (command)


state 99

   45 command: CALL IDENTIFIER $@3 . '(' arguments ')'

    '('  shift, and go to state 127


state 100

   20 parameters: SKIP .

    $default  reduce using rule 20 (parameters)


state 101

   21 parameters: INTEGER . IDENTIFIER
   22           | INTEGER . IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 128


state 102

   23 parameters: BOOLE . IDENTIFIER
   24           | BOOLE . IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 129


state 103

   25 parameters: STR . IDENTIFIER
   26           | STR . IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 130


state 104

   17 fun: FUN IDENTIFIER $@2 '(' parameter ')' . declaration commands END_FUN

    $default  reduce using rule 3 (declaration)

    declaration  go to state 131


state 105

   19 parameter: parameter parameters .

    $default  reduce using rule 19 (parameter)


state 106

   42 command: IDENTIFIER ASSGNOP IDENTIFIER OUTFROM .

    $default  reduce using rule 42 (command)


state 107

   47 command: IDENTIFIER ASSGNOP CALL IDENTIFIER . $@4 '(' arguments ')'

    $default  reduce using rule 46 ($@4)

    $@4  go to state 132


state 108

   41 command: IDENTIFIER ONTO '<' exp_int . '>'
   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '-'  shift, and go to state 78
    '+'  shift, and go to state 79
    '*'  shift, and go to state 80
    '/'  shift, and go to state 81
    '^'  shift, and go to state 82
    '|'  shift, and go to state 83
    '&'  shift, and go to state 84
    '='  shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 133


state 109

   86 exp_int: '(' exp_int ')' .

    $default  reduce using rule 86 (exp_int)


state 110

   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   78        | exp_int LEQ exp_int .
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '-'  shift, and go to state 78
    '+'  shift, and go to state 79
    '*'  shift, and go to state 80
    '/'  shift, and go to state 81
    '^'  shift, and go to state 82
    '|'  shift, and go to state 83
    '&'  shift, and go to state 84
    '='  shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    LEQ       [reduce using rule 78 (exp_int)]
    GEQ       [reduce using rule 78 (exp_int)]
    '-'       [reduce using rule 78 (exp_int)]
    '+'       [reduce using rule 78 (exp_int)]
    '*'       [reduce using rule 78 (exp_int)]
    '/'       [reduce using rule 78 (exp_int)]
    '^'       [reduce using rule 78 (exp_int)]
    '|'       [reduce using rule 78 (exp_int)]
    '&'       [reduce using rule 78 (exp_int)]
    '='       [reduce using rule 78 (exp_int)]
    '<'       [reduce using rule 78 (exp_int)]
    '>'       [reduce using rule 78 (exp_int)]
    $default  reduce using rule 78 (exp_int)


state 111

   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   77        | exp_int GEQ exp_int .
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '-'  shift, and go to state 78
    '+'  shift, and go to state 79
    '*'  shift, and go to state 80
    '/'  shift, and go to state 81
    '^'  shift, and go to state 82
    '|'  shift, and go to state 83
    '&'  shift, and go to state 84
    '='  shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    LEQ       [reduce using rule 77 (exp_int)]
    GEQ       [reduce using rule 77 (exp_int)]
    '-'       [reduce using rule 77 (exp_int)]
    '+'       [reduce using rule 77 (exp_int)]
    '*'       [reduce using rule 77 (exp_int)]
    '/'       [reduce using rule 77 (exp_int)]
    '^'       [reduce using rule 77 (exp_int)]
    '|'       [reduce using rule 77 (exp_int)]
    '&'       [reduce using rule 77 (exp_int)]
    '='       [reduce using rule 77 (exp_int)]
    '<'       [reduce using rule 77 (exp_int)]
    '>'       [reduce using rule 77 (exp_int)]
    $default  reduce using rule 77 (exp_int)


state 112

   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   80        | exp_int '-' exp_int .
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '*'  shift, and go to state 80
    '/'  shift, and go to state 81
    '^'  shift, and go to state 82
    '|'  shift, and go to state 83
    '&'  shift, and go to state 84
    '='  shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    LEQ       [reduce using rule 80 (exp_int)]
    GEQ       [reduce using rule 80 (exp_int)]
    '<'       [reduce using rule 80 (exp_int)]
    '>'       [reduce using rule 80 (exp_int)]
    $default  reduce using rule 80 (exp_int)


state 113

   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   79        | exp_int '+' exp_int .
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '*'  shift, and go to state 80
    '/'  shift, and go to state 81
    '^'  shift, and go to state 82
    '|'  shift, and go to state 83
    '&'  shift, and go to state 84
    '='  shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    LEQ       [reduce using rule 79 (exp_int)]
    GEQ       [reduce using rule 79 (exp_int)]
    '<'       [reduce using rule 79 (exp_int)]
    '>'       [reduce using rule 79 (exp_int)]
    $default  reduce using rule 79 (exp_int)


state 114

   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   81        | exp_int '*' exp_int .
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '^'  shift, and go to state 82
    '|'  shift, and go to state 83
    '&'  shift, and go to state 84
    '='  shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    LEQ       [reduce using rule 81 (exp_int)]
    GEQ       [reduce using rule 81 (exp_int)]
    '<'       [reduce using rule 81 (exp_int)]
    '>'       [reduce using rule 81 (exp_int)]
    $default  reduce using rule 81 (exp_int)


state 115

   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   82        | exp_int '/' exp_int .
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '^'  shift, and go to state 82
    '|'  shift, and go to state 83
    '&'  shift, and go to state 84
    '='  shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    LEQ       [reduce using rule 82 (exp_int)]
    GEQ       [reduce using rule 82 (exp_int)]
    '<'       [reduce using rule 82 (exp_int)]
    '>'       [reduce using rule 82 (exp_int)]
    $default  reduce using rule 82 (exp_int)


state 116

   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   83        | exp_int '^' exp_int .
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '^'  shift, and go to state 82
    '|'  shift, and go to state 83
    '&'  shift, and go to state 84
    '='  shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    LEQ       [reduce using rule 83 (exp_int)]
    GEQ       [reduce using rule 83 (exp_int)]
    '<'       [reduce using rule 83 (exp_int)]
    '>'       [reduce using rule 83 (exp_int)]
    $default  reduce using rule 83 (exp_int)


state 117

   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   84        | exp_int '|' exp_int .
   85        | exp_int . '&' exp_int

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '='  shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    LEQ       [reduce using rule 84 (exp_int)]
    GEQ       [reduce using rule 84 (exp_int)]
    '<'       [reduce using rule 84 (exp_int)]
    '>'       [reduce using rule 84 (exp_int)]
    $default  reduce using rule 84 (exp_int)


state 118

   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int
   85        | exp_int '&' exp_int .

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '='  shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    LEQ       [reduce using rule 85 (exp_int)]
    GEQ       [reduce using rule 85 (exp_int)]
    '<'       [reduce using rule 85 (exp_int)]
    '>'       [reduce using rule 85 (exp_int)]
    $default  reduce using rule 85 (exp_int)


state 119

   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   75        | exp_int '=' exp_int .
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    LEQ       [reduce using rule 75 (exp_int)]
    GEQ       [reduce using rule 75 (exp_int)]
    '<'       [reduce using rule 75 (exp_int)]
    '>'       [reduce using rule 75 (exp_int)]
    $default  reduce using rule 75 (exp_int)


state 120

   74 exp_int: exp_int . '<' exp_int
   74        | exp_int '<' exp_int .
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '-'  shift, and go to state 78
    '+'  shift, and go to state 79
    '*'  shift, and go to state 80
    '/'  shift, and go to state 81
    '^'  shift, and go to state 82
    '|'  shift, and go to state 83
    '&'  shift, and go to state 84
    '='  shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    LEQ       [reduce using rule 74 (exp_int)]
    GEQ       [reduce using rule 74 (exp_int)]
    '-'       [reduce using rule 74 (exp_int)]
    '+'       [reduce using rule 74 (exp_int)]
    '*'       [reduce using rule 74 (exp_int)]
    '/'       [reduce using rule 74 (exp_int)]
    '^'       [reduce using rule 74 (exp_int)]
    '|'       [reduce using rule 74 (exp_int)]
    '&'       [reduce using rule 74 (exp_int)]
    '='       [reduce using rule 74 (exp_int)]
    '<'       [reduce using rule 74 (exp_int)]
    '>'       [reduce using rule 74 (exp_int)]
    $default  reduce using rule 74 (exp_int)


state 121

   74 exp_int: exp_int . '<' exp_int
   75        | exp_int . '=' exp_int
   76        | exp_int . '>' exp_int
   76        | exp_int '>' exp_int .
   77        | exp_int . GEQ exp_int
   78        | exp_int . LEQ exp_int
   79        | exp_int . '+' exp_int
   80        | exp_int . '-' exp_int
   81        | exp_int . '*' exp_int
   82        | exp_int . '/' exp_int
   83        | exp_int . '^' exp_int
   84        | exp_int . '|' exp_int
   85        | exp_int . '&' exp_int

    LEQ  shift, and go to state 76
    GEQ  shift, and go to state 77
    '-'  shift, and go to state 78
    '+'  shift, and go to state 79
    '*'  shift, and go to state 80
    '/'  shift, and go to state 81
    '^'  shift, and go to state 82
    '|'  shift, and go to state 83
    '&'  shift, and go to state 84
    '='  shift, and go to state 85
    '<'  shift, and go to state 86
    '>'  shift, and go to state 87

    LEQ       [reduce using rule 76 (exp_int)]
    GEQ       [reduce using rule 76 (exp_int)]
    '-'       [reduce using rule 76 (exp_int)]
    '+'       [reduce using rule 76 (exp_int)]
    '*'       [reduce using rule 76 (exp_int)]
    '/'       [reduce using rule 76 (exp_int)]
    '^'       [reduce using rule 76 (exp_int)]
    '|'       [reduce using rule 76 (exp_int)]
    '&'       [reduce using rule 76 (exp_int)]
    '='       [reduce using rule 76 (exp_int)]
    '<'       [reduce using rule 76 (exp_int)]
    '>'       [reduce using rule 76 (exp_int)]
    $default  reduce using rule 76 (exp_int)


state 122

   61 command: IF exp_int $@5 THEN . commands $@6 ELSE $@7 commands FI

    $default  reduce using rule 37 (commands)

    commands  go to state 134


state 123

   68 command: IF exp_bol $@10 THEN . commands $@11 ELSE $@12 commands FI

    $default  reduce using rule 37 (commands)

    commands  go to state 135


state 124

   91 exp_str: exp_str . '.' exp_str
   91        | exp_str '.' exp_str .

    '.'  shift, and go to state 90

    '.'       [reduce using rule 91 (exp_str)]
    $default  reduce using rule 91 (exp_str)


state 125

   64 command: WHILE $@8 exp_int $@9 . DO commands END

    DO  shift, and go to state 136


state 126

   71 command: WHILE $@13 exp_bol $@14 . DO commands END

    DO  shift, and go to state 137


state 127

   45 command: CALL IDENTIFIER $@3 '(' . arguments ')'

    IDENTIFIER  reduce using rule 29 (argument)
    $default    reduce using rule 27 (arguments)

    arguments  go to state 138
    argument   go to state 139


state 128

   21 parameters: INTEGER IDENTIFIER .
   22           | INTEGER IDENTIFIER . ';'

    ';'  shift, and go to state 140

    $default  reduce using rule 21 (parameters)


state 129

   23 parameters: BOOLE IDENTIFIER .
   24           | BOOLE IDENTIFIER . ';'

    ';'  shift, and go to state 141

    $default  reduce using rule 23 (parameters)


state 130

   25 parameters: STR IDENTIFIER .
   26           | STR IDENTIFIER . ';'

    ';'  shift, and go to state 142

    $default  reduce using rule 25 (parameters)


state 131

    4 declaration: declaration . declarations
   17 fun: FUN IDENTIFIER $@2 '(' parameter ')' declaration . commands END_FUN

    SKIP     shift, and go to state 5
    INTEGER  shift, and go to state 6
    BOOLE    shift, and go to state 7
    STR      shift, and go to state 8
    STACK    shift, and go to state 9

    SKIP      [reduce using rule 37 (commands)]
    $default  reduce using rule 37 (commands)

    declarations  go to state 10
    commands      go to state 143


state 132

   47 command: IDENTIFIER ASSGNOP CALL IDENTIFIER $@4 . '(' arguments ')'

    '('  shift, and go to state 144


state 133

   41 command: IDENTIFIER ONTO '<' exp_int '>' .
   76 exp_int: exp_int '>' . exp_int

    NUMBER      shift, and go to state 50
    IDENTIFIER  shift, and go to state 61
    '('         shift, and go to state 52

    IDENTIFIER  [reduce using rule 41 (command)]
    $default    reduce using rule 41 (command)

    exp_int  go to state 121


state 134

   38 commands: commands . command
   39         | commands . command ';'
   61 command: IF exp_int $@5 THEN commands . $@6 ELSE $@7 commands FI

    IDENTIFIER  shift, and go to state 35
    IF          shift, and go to state 36
    WHILE       shift, and go to state 37
    SKIP        shift, and go to state 38
    READ        shift, and go to state 40
    WRITE       shift, and go to state 41
    RETURN      shift, and go to state 42
    CALL        shift, and go to state 43

    $default  reduce using rule 59 ($@6)

    command  go to state 44
    $@6      go to state 145


state 135

   38 commands: commands . command
   39         | commands . command ';'
   68 command: IF exp_bol $@10 THEN commands . $@11 ELSE $@12 commands FI

    IDENTIFIER  shift, and go to state 35
    IF          shift, and go to state 36
    WHILE       shift, and go to state 37
    SKIP        shift, and go to state 38
    READ        shift, and go to state 40
    WRITE       shift, and go to state 41
    RETURN      shift, and go to state 42
    CALL        shift, and go to state 43

    $default  reduce using rule 66 ($@11)

    command  go to state 44
    $@11     go to state 146


state 136

   64 command: WHILE $@8 exp_int $@9 DO . commands END

    $default  reduce using rule 37 (commands)

    commands  go to state 147


state 137

   71 command: WHILE $@13 exp_bol $@14 DO . commands END

    $default  reduce using rule 37 (commands)

    commands  go to state 148


state 138

   45 command: CALL IDENTIFIER $@3 '(' arguments . ')'

    ')'  shift, and go to state 149


state 139

   28 arguments: argument . IDENTIFIER
   30 argument: argument . IDENTIFIER ','

    IDENTIFIER  shift, and go to state 150


state 140

   22 parameters: INTEGER IDENTIFIER ';' .

    $default  reduce using rule 22 (parameters)


state 141

   24 parameters: BOOLE IDENTIFIER ';' .

    $default  reduce using rule 24 (parameters)


state 142

   26 parameters: STR IDENTIFIER ';' .

    $default  reduce using rule 26 (parameters)


state 143

   17 fun: FUN IDENTIFIER $@2 '(' parameter ')' declaration commands . END_FUN
   38 commands: commands . command
   39         | commands . command ';'

    IDENTIFIER  shift, and go to state 35
    IF          shift, and go to state 36
    WHILE       shift, and go to state 37
    SKIP        shift, and go to state 38
    READ        shift, and go to state 40
    WRITE       shift, and go to state 41
    END_FUN     shift, and go to state 151
    RETURN      shift, and go to state 42
    CALL        shift, and go to state 43

    command  go to state 44


state 144

   47 command: IDENTIFIER ASSGNOP CALL IDENTIFIER $@4 '(' . arguments ')'

    IDENTIFIER  reduce using rule 29 (argument)
    $default    reduce using rule 27 (arguments)

    arguments  go to state 152
    argument   go to state 139


state 145

   61 command: IF exp_int $@5 THEN commands $@6 . ELSE $@7 commands FI

    ELSE  shift, and go to state 153


state 146

   68 command: IF exp_bol $@10 THEN commands $@11 . ELSE $@12 commands FI

    ELSE  shift, and go to state 154


state 147

   38 commands: commands . command
   39         | commands . command ';'
   64 command: WHILE $@8 exp_int $@9 DO commands . END

    IDENTIFIER  shift, and go to state 35
    IF          shift, and go to state 36
    WHILE       shift, and go to state 37
    SKIP        shift, and go to state 38
    END         shift, and go to state 155
    READ        shift, and go to state 40
    WRITE       shift, and go to state 41
    RETURN      shift, and go to state 42
    CALL        shift, and go to state 43

    command  go to state 44


state 148

   38 commands: commands . command
   39         | commands . command ';'
   71 command: WHILE $@13 exp_bol $@14 DO commands . END

    IDENTIFIER  shift, and go to state 35
    IF          shift, and go to state 36
    WHILE       shift, and go to state 37
    SKIP        shift, and go to state 38
    END         shift, and go to state 156
    READ        shift, and go to state 40
    WRITE       shift, and go to state 41
    RETURN      shift, and go to state 42
    CALL        shift, and go to state 43

    command  go to state 44


state 149

   45 command: CALL IDENTIFIER $@3 '(' arguments ')' .

    $default  reduce using rule 45 (command)


state 150

   28 arguments: argument IDENTIFIER .
   30 argument: argument IDENTIFIER . ','

    ','  shift, and go to state 157

    $default  reduce using rule 28 (arguments)


state 151

   17 fun: FUN IDENTIFIER $@2 '(' parameter ')' declaration commands END_FUN .

    $default  reduce using rule 17 (fun)


state 152

   47 command: IDENTIFIER ASSGNOP CALL IDENTIFIER $@4 '(' arguments . ')'

    ')'  shift, and go to state 158


state 153

   61 command: IF exp_int $@5 THEN commands $@6 ELSE . $@7 commands FI

    $default  reduce using rule 60 ($@7)

    $@7  go to state 159


state 154

   68 command: IF exp_bol $@10 THEN commands $@11 ELSE . $@12 commands FI

    $default  reduce using rule 67 ($@12)

    $@12  go to state 160


state 155

   64 command: WHILE $@8 exp_int $@9 DO commands END .

    $default  reduce using rule 64 (command)


state 156

   71 command: WHILE $@13 exp_bol $@14 DO commands END .

    $default  reduce using rule 71 (command)


state 157

   30 argument: argument IDENTIFIER ',' .

    $default  reduce using rule 30 (argument)


state 158

   47 command: IDENTIFIER ASSGNOP CALL IDENTIFIER $@4 '(' arguments ')' .

    $default  reduce using rule 47 (command)


state 159

   61 command: IF exp_int $@5 THEN commands $@6 ELSE $@7 . commands FI

    $default  reduce using rule 37 (commands)

    commands  go to state 161


state 160

   68 command: IF exp_bol $@10 THEN commands $@11 ELSE $@12 . commands FI

    $default  reduce using rule 37 (commands)

    commands  go to state 162


state 161

   38 commands: commands . command
   39         | commands . command ';'
   61 command: IF exp_int $@5 THEN commands $@6 ELSE $@7 commands . FI

    IDENTIFIER  shift, and go to state 35
    IF          shift, and go to state 36
    WHILE       shift, and go to state 37
    SKIP        shift, and go to state 38
    FI          shift, and go to state 163
    READ        shift, and go to state 40
    WRITE       shift, and go to state 41
    RETURN      shift, and go to state 42
    CALL        shift, and go to state 43

    command  go to state 44


state 162

   38 commands: commands . command
   39         | commands . command ';'
   68 command: IF exp_bol $@10 THEN commands $@11 ELSE $@12 commands . FI

    IDENTIFIER  shift, and go to state 35
    IF          shift, and go to state 36
    WHILE       shift, and go to state 37
    SKIP        shift, and go to state 38
    FI          shift, and go to state 164
    READ        shift, and go to state 40
    WRITE       shift, and go to state 41
    RETURN      shift, and go to state 42
    CALL        shift, and go to state 43

    command  go to state 44


state 163

   61 command: IF exp_int $@5 THEN commands $@6 ELSE $@7 commands FI .

    $default  reduce using rule 61 (command)


state 164

   68 command: IF exp_bol $@10 THEN commands $@11 ELSE $@12 commands FI .

    $default  reduce using rule 68 (command)
